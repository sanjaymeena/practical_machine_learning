dataF <- data.frame(x=x,y=dpois(x,lambda=.2))
g <- ggplot(data=dataF,aes(x,y) ) + geom_line(size=2)
g <- g + geom_vline(xintercept = -3:3, size=2)
g
x <- seq(0,10,length=10000)
dataF <- data.frame(x=x,y=dpois(x,lambda=.2))
g <- ggplot(data=dataF,aes(x,y) ) + geom_line(size=2)
g <- g
g
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
dataF <- data.frame(x=1:n, y=means)
g <- ggplot(dataF,aes(x,y))
g <- g + geom_hline(yintercept=0)+ geom_line(size=2)
g <- g + labs(x="Number of obs", y= "Cumulative mean", title="Law of large numbers in action")
g
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
dataF <- data.frame(x=1:n, y=means)
g <- ggplot(dataF,aes(x,y))
g <- g + geom_hline(yintercept=0)+ geom_line(size=2)
g <- g + labs(x="Number of obs", y= "Cumulative mean", title="Law of large numbers in action")n <- 10000
means <- cumsum(rnorm(n))/(1:n)
dataF <- data.frame(x=1:n, y=means)
g <- ggplot(dataF,aes(x=x,y=y))
g <- g + geom_hline(yintercept=0)+ geom_line(size=2)
g <- g + labs(x="Number of obs", y= "Cumulative mean", title="Law of large numbers in action")
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
dataF <- data.frame(x=1:n, y=means)
g <- ggplot(dataF,aes(x=x,y=y))
g <- g + geom_hline(yintercept=0)+ geom_line(size=2)
g <- g + labs(x="Number of obs", y= "Cumulative mean", title="Law of large numbers in action")
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
dataF <- data.frame(x=1:n, y=means)
g <- ggplot(dataF,aes(x=x,y=y))
g <- g + geom_hline(yintercept=0)+ geom_line(size=2)
g <- g + labs(x="Number of obs", y= "Cumulative mean", title="Law of large numbers in action")
g
g <- g + labs(x="Number of obs", y= "Cumulative mean", title="Law of large numbers in action, coin flip")
?replicate
?rep
?aes
n=1000
# lambda
lambda=0.2
# data frame
df <- data.frame(exp=rexp(n,lambda))
g <- ggplot(data=df, aes(x=exp))
g <- g + geom_histogram(aes(y=..density..), binwidth=.5, color="blue",fill="grey")
g <- g + geom_vline(aes(xintercept=mean(exp)), color="orange",size=2)
g
# number of observations
n=1000
# lambda
lambda=0.2
# data frame
df <- data.frame(exp=rexp(n,lambda))
g <- ggplot(data=df, aes(x=exp))
g <- g + geom_histogram(aes(y=..density..), binwidth=.5, color="black",fill="green")
g <- g + geom_vline(aes(xintercept=mean(exp)), color="orange",size=2)
g
n=1000
# lambda
lambda=0.2
# data frame
df <- data.frame(exp=rexp(n,lambda))
g <- ggplot(data=df, aes(x=exp))
g <- g + geom_histogram(aes(y=..density..), binwidth=.5, color="green",fill="black")
g <- g + geom_vline(aes(xintercept=mean(exp)), color="orange",size=2)
g
g <- g+ geom_density(alpha=0.2, fill="green")
g <- g+ geom_density(alpha=0.2, fill="red")
n=1000
# lambda
lambda=0.2
# data frame
df <- data.frame(exp=rexp(n,lambda))
g <- ggplot(data=df, aes(x=exp))
g <- g + geom_histogram(aes(y=..density..), binwidth=.5, color="black",fill="white")
g <- g + geom_vline(aes(xintercept=mean(exp)), color="orange",size=2)
g <- g+ geom_density(alpha=0.2, fill="red")
g
n=1000
# lambda
lambda=0.2
# data frame
df <- data.frame(exp=rexp(n,lambda))
g <- ggplot(data=df, aes(x=exp))
g <- g + geom_histogram(aes(y=..density..), binwidth=.5, color="black",fill="white")
g <- g + geom_vline(aes(xintercept=mean(exp)), color="orange",size=1)
g <- g+ geom_density(alpha=0.2, fill="blue")
g
?annotate
g <- g + geom_vline(aes(xintercept=mean(exp)), color="orange",size=2)  +annotate("text", x = 6 , y = .1, label="Group 1")
df = data.frame(expmean = mean(rexp(40, lambda)))
df
for (i in 2 : 1000) df <- rbind(df, mean(rexp(40, lambda)))
df
?rbind
df = data.frame(expmean = mean(rexp(40, lambda)))
for (i in 2 : 1000) df <- rbind(df, mean(rexp(40, lambda)))
for (i in 1average_no_exp <- 40
df <- data.frame(rexp(average_no_exp,lambda)) : 1000) df <- rbind(df, mean(rexp(40, lambda)))
average_no_exp <- 40
df <- data.frame(rexp(average_no_exp,lambda))
df
average_no_exp <- 40
df <- data.frame(mean(rexp(average_no_exp,lambda))
df
average_no_exp <- 40
df <- data.frame(mean(rexp(average_no_exp,lambda)))
df
for (i in 2 : 1000) df <- rbind(df, mean(rexp(40, lambda)))theor_var = square(1/lambda)
sqtheor_var = square(1/lambda)
theor_var = square(1/lambda)
theor_var = (1/lambda)^2
theor_var
?stat_function
?geom_density
df <- data.frame(exp=mean(rexp(exp_no,lambda)))
for(i in 2:n)
df <- rbind(df,mean(rexp(exp_no,lambda)))
mean(df$exp)
exp_no <- 40
df <- data.frame(exp=mean(rexp(exp_no,lambda)))
for(i in 2:n)
df <- rbind(df,mean(rexp(exp_no,lambda)))
mean(df$exp)
var(df$exp)
1/.2
library(usingR)
install.packages("UsingR")
data(father.son)
data(father.son)
library(usingR)
data(father.son)
library(usingR)
library(UsingR)
data(father.son)
str(x)
x <- father.son$sheight
x
str(x)
library(UsingR)
data(father.son)
x <- father.son$sheight
ci <- (mean(x) + c(-1,1)* qnorm(p=.025, lower.tail = TRUE)* sd(x)/sqrt(length(x)))/12
ci
library(UsingR)
data(father.son)
x <- father.son$sheight
ci <- (mean(x) + c(-1,1)* qnorm(p=.975, lower.tail = TRUE)* sd(x)/sqrt(length(x)))/12
ci
ci <- (mean(x) + c(-1,1)* qnorm(p=.025, lower.tail = FALSE)* sd(x)/sqrt(length(x)))/12
library(UsingR)
data(father.son)
x <- father.son$sheight
ci <- (mean(x) + c(-1,1)* qnorm(p=.025, lower.tail = FALSE)* sd(x)/sqrt(length(x)))/12
ci
56 + c(-1,1)* 2* (1/2)/sqrt(100)
56 + c(-1,1)* 2* (1/2)* 1 /sqrt(100)
(0.56) + c(-1,1)* qnorm(.975)* sqrt (.56 * .44/100)
data(mtcars)
str(mpg)
mtcars
data(mtcars)
var_mpg <- mtcars$mpg
var_mpg
ci <- mean(var_mpg) + c(-1,1) * qnorm(.975) * sd(mpg)/sqrt(length(var_mpg))
ci <- mean(var_mpg) + c(-1,1) * qnorm(.975) * sd(var_mpg)/sqrt(length(var_mpg))
ci
t_test <- t.test(var_mpg)
t_test$conf.int
mpg
str(mpg)
ci <- mean(var_mpg) + c(-1,1) * qnorm(.975) * sd(var_mpg)/sqrt(length(var_mpg))
1100 + c(-1,1)* qnorm(.975)* 30/sqrt(9)
n=9
w_diff <- -2
sd <- (-w_diff) * sqrt(n)/qnorm(.975)
sd
n=9
w_diff <- -2
sd <- (-w_diff) * sqrt(n)/qnorm(.975,lower.tail = FALSE)
sd
n=9
w_diff <- -2
sd <- (-w_diff) * sqrt(n)/qnorm(.025,lower.tail = FALSE)
sd
n=9
w_diff <- -2
sd <- (-w_diff) * sqrt(n)/qnorm(.025,lower.tail = TRUE
)
sd
confint <- as.vector(t.test(3, 5))$conf.int
?qunif
x <- 1:4
p <- x/sum(x)
temp <- rbind(x,p)
rownames(temp) <- c("X", "Prob")
temp
sum(x^2 * p)- (sum (x*p)^2)
sum(x^2 * p)- (sum (x*p)^2)
temp
sum(x^2 * p)- (sum (x*p)^2)
sum((temp$X)^2 * temp$Prob)
sum((temp$X)^2 * temp$Prob)
(temp$X)^2
temp$X
temp[1]
temp[1,0]
temp[1,]
sum((temp[1,0])^2 * temp[2,0])
temp[2,0]
temp[2,]
sum((temp[1,0])^2 * temp[2,])
sum((temp[1,])^2 * temp[2,])
sum((temp[1,])^2 * temp[2,])- sum(temp[1,]*temp[2,])^2
sum((temp[1,]) * temp[2,])
library(swirl)
swirl()
install.packages("devtools")
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
library(devtools)
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
install_github("OpenIntroOrg/openintro-r-package", subdir = "OIsurv")
install_github("OpenIntroOrg/openintro-r-package", subdir = "stockPortfolio")
data(YRBSS)
data(yrbss)
library(oi)
?pnrom
?pnorm
pnorm(52,mean=44.17,sd=4.15)
pnorm(n=52,mean=44.17,sd=4.15)
?pt
pnorm(size=52,mean=44.17,sd=4.15)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
setwd("~/rworkspace/data_products/slides")
========================================================
setwd("~/rworkspace/practical_machine_learning/course_project")
trainUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(trainFile)) {
download.file(trainUrl, destfile=trainFile, method="curl")
}
if (!file.exists(testFile)) {
download.file(testUrl, destfile=testFile, method="curl")
}
trainUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFile <- "./data/pml-training.csv"
testFile  <- "./data/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(trainFile)) {
download.file(trainUrl, destfile=trainFile, method="curl")
}
if (!file.exists(testFile)) {
download.file(testUrl, destfile=testFile, method="curl")
}
trainData <- read.csv("./data/pml-training.csv")
testData <- read.csv("./data/pml-testing.csv")
dim(trainData); dim(trainData)
dim(trainData);
dim(trainData)
dim(testData)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myDataNZV <- nearZeroVar(trainData, saveMetrics=TRUE)
summary(myDataNZV)
myDataNZV
head(trainData)
names(trainData)
trainData["classe"]
head(trainData)
head(testData)
* Class E : throwing the hips to the front .
summary(trainData)
trainingRaw <- read.csv(file="./data/pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testingRaw <- read.csv(file="./data/pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
dim(trainData);
dim(testData)
summary(trainData)
str(trainData)
sum(complete.cases(trainRaw))
sum(complete.cases(trainData))
for
trainDataNZV <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- read.csv(file="./data/pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testData <- read.csv(file="./data/pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
trainDataNZV <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,trainDataNZV$nzv==FALSE]
# remove nzv from test data
testDataNZV <- nearZeroVar(testData, saveMetrics=TRUE)
testData <- testData[,testDataNZV$nzv==FALSE]
trainData <- trainData[c(-1)]
# Remove nzv from train data
trainDataNZV <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,trainDataNZV$nzv==FALSE]
# remove nzv from test data
testDataNZV <- nearZeroVar(testData, saveMetrics=TRUE)
testData <- testData[,testDataNZV$nzv==FALSE]
tempTrain <- trainData
for(i in (1: length(trainData))){
if(sum(is.na(trainData[,i]))/nrow(trainData) >= .8){
for (j:1:length(tempTrain)){
if(length(grep(names(trainData[i],names(tempTrain)))==1)){
tempTrain <- tempTrain[,-j]
}
}
}
}
tempTrain <- trainData
for(i in (1: length(trainData))){
if(sum(is.na(trainData[,i]))/nrow(trainData) >= .8){
for (j:1:length(tempTrain)){
if(length(grep(names(trainData[i]),names(tempTrain)))==1)){
tempTrain <- tempTrain[,-j]
}
}
}
}
tempTrain <- trainData
for(i in (1: length(trainData))){
if(sum(is.na(trainData[,i]))/nrow(trainData) >= .8){
for (j:1:length(tempTrain)){
for(i in (1: length(trainData))){
if(sum(is.na(trainData[,i]))/nrow(trainData) >= .8){
for (j in (1:length(tempTrain)){
tempTrain <- trainData
for(i in (1: length(trainData))){
if(sum(is.na(trainData[,i]))/nrow(trainData) >= .8){
for (j in (1:length(tempTrain)){
if(length(grep(names(trainData[i]),names(tempTrain)))==1){
tempTrain <- tempTrain[,-j]
}
}
}
}
tempTrain <- trainData
for(i in 1: length(trainData)){
if(sum(is.na(trainData[,i]))/nrow(trainData) >= .8){
for (j in 1:length(tempTrain)){
if(length(grep( names(trainData[i]),names(tempTrain[j]) )==1)){
tempTrain <- tempTrain[,-j]
}
}
}
}
tempTrain <- trainData
for(i in 1: length(trainData)){
if(sum(is.na(trainData[,i]))/nrow(trainData) >= .8){
for (j in 1:length(tempTrain)){
if(length(grep( names(trainData[i]),names(tempTrain[j]) )==1)){
tempTrain <- tempTrain[,-j]
}
}
}
}
tempTrain <- trainData
for(i in 1: length(trainData)){
if(sum(is.na(trainData[,i]))/nrow(trainData) >= .8){
for (j in 1:length(tempTrain)){
if(length(grep( names(trainData[i]),names(tempTrain)[j]) ==1)){
tempTrain <- tempTrain[,-j]
}
}
}
}
tempTrain
str(tempTrain)
trainCleaned <- tempTrain
rm(tempTrain)
# Slice the data into 70% training and 30% testing
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
dim(trainData)
dim(trainCleaned)
train_control_Rf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=train_control_Rf, ntree=250)
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
train_control_Rf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=train_control_Rf, ntree=250)
modelRf
modFitA1 <- rpart(classe ~ ., data=trainData, method="class")
fancyRpartPlot(modFitA1)
train_control_Rf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf")
library(randomForest)
modelRf <- train(classe ~ ., data=trainData, method="rf")
fit = train(classe ~., method="rf", data=trainData, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
trainData <- read.csv(file="./data/pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testData <- read.csv(file="./data/pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
trainData <- read.csv(file="./data/pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testData <- read.csv(file="./data/pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
dim(trainData);
dim(testData)
str(trainData)
myDataNZV <- nearZeroVar(trainData, saveMetrics=TRUE)
summary(myDataNZV)
head(trainData)
sum(complete.cases(trainData))
#Clean the data
## Remove the near zero variance variables
# Remove name column as it is not relevant
trainData <- trainData[c(-1)]
# Remove nzv from train data
trainDataNZV <- nearZeroVar(trainData, saveMetrics=TRUE)
trainData <- trainData[,trainDataNZV$nzv==FALSE]
# remove nzv from test data
testDataNZV <- nearZeroVar(testData, saveMetrics=TRUE)
testData <- testData[,testDataNZV$nzv==FALSE]
trainRaw <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
trainCleaned <- tempTrain
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
modFitA1 <- rpart(classe ~ ., data=trainData, method="class")
fancyRpartPlot(modFitA1)
fit = train(classe ~., method="rf", data=trainData, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
str(trainDat)
str(trainData)
fit = train(classe ~., method="rf", data=testData, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
inTrain <- createDataPartition(trainData$classe, p=0.70, list=F)
trainData <- trainData[inTrain, ]
testData <- trainData[-inTrain, ]
str(trainData)
fit = train(classe ~., method="rf", data=testData, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
a
trainData <- trainData[, colSums(is.na(trainData)) == 0]
testData <- testData[, colSums(is.na(testData)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
trainRaw <- trainData[, colSums(is.na(trainData)) == 0]
testRaw <- testData[, colSums(is.na(testData)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
trainData <- read.csv(file="./data/pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testData <- read.csv(file="./data/pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
trainRaw <- trainData[, colSums(is.na(trainData)) == 0]
testRaw <- testData[, colSums(is.na(testData)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
